generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(uuid()) @db.Uuid
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  username      String      @unique
  email         String      @unique
  password      String
  active        Boolean     @default(true)
  avatarUrl     String?
  feedbackScore Int?
  posts         Post[]
  topics        Topic[]
  role          Role        @default(USER)
  likedPosts    PostLike[]
  likedTopics   TopicLike[]
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

model ForgotPassword {
  email      String
  token      String   @id @default(uuid())
  expiration DateTime
}

model Group {
  id         String     @id @default(uuid()) @db.Uuid
  name       String     @unique
  categories Category[]
}

model Category {
  id          String  @id @default(uuid()) @db.Uuid
  name        String  @unique
  description String
  slug        String  @unique
  topics      Topic[]
  group       Group   @relation(fields: [groupId], references: [id])
  groupId     String  @db.Uuid
}

model Topic {
  id           String      @id @default(uuid()) @db.Uuid
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  title        String
  user         User        @relation(fields: [userId], references: [id])
  userId       String      @db.Uuid
  views        Int         @default(0)
  slug         String      @unique
  posts        Post[]
  likes        TopicLike[]
  category     Category    @relation(fields: [categorySlug], references: [slug])
  categorySlug String
}

model Post {
  id           String     @id @default(uuid()) @db.Uuid
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  content      String
  user         User       @relation(fields: [userId], references: [id])
  userId       String     @db.Uuid
  topic        Topic      @relation(fields: [topicId], references: [id])
  topicId      String     @db.Uuid
  likes        PostLike[]
  originalPost Boolean    @default(false)
}

model PostLike {
  id         String     @id @default(uuid())
  user       User       @relation(fields: [userId], references: [id])
  userId     String     @db.Uuid
  post       Post       @relation(fields: [postId], references: [id])
  postId     String     @db.Uuid
  likeStatus LikeStatus
}

model TopicLike {
  id         String     @id @default(uuid())
  user       User       @relation(fields: [userId], references: [id])
  userId     String     @db.Uuid
  topic      Topic      @relation(fields: [topicId], references: [id])
  topicId    String     @db.Uuid
  likeStatus LikeStatus
}

enum LikeStatus {
  UPVOTE
  DOWNVOTE
}
